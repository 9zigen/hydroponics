/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: state.proto */

#ifndef PROTOBUF_C_state_2eproto__INCLUDED
#define PROTOBUF_C_state_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "config.pb-c.h"

typedef struct _Hydroponics__StateTask Hydroponics__StateTask;
typedef struct _Hydroponics__StateMemory Hydroponics__StateMemory;
typedef struct _Hydroponics__StateTelemetry Hydroponics__StateTelemetry;
typedef struct _Hydroponics__StateTelemetry__Value Hydroponics__StateTelemetry__Value;
typedef struct _Hydroponics__StateOutput Hydroponics__StateOutput;
typedef struct _Hydroponics__State Hydroponics__State;
typedef struct _Hydroponics__States Hydroponics__States;


/* --- enums --- */

/*
 * Task state that directly matches task.h eTaskState enumeration.
 */
typedef enum _Hydroponics__StateTask__State {
  /*
   * A task is querying the state of itself, so must be running.
   */
  HYDROPONICS__STATE_TASK__STATE__RUNNING = 0,
  /*
   * The task being queried is in a read or pending ready list.
   */
  HYDROPONICS__STATE_TASK__STATE__READY = 1,
  /*
   * The task being queried is in the Blocked state.
   */
  HYDROPONICS__STATE_TASK__STATE__BLOCKED = 2,
  /*
   * The task being queried is in the Suspended state, or is in the Blocked state with an infinite time out.
   */
  HYDROPONICS__STATE_TASK__STATE__SUSPENDED = 3,
  /*
   * The task being queried has been deleted, but its TCB has not yet been freed.
   */
  HYDROPONICS__STATE_TASK__STATE__DELETED = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HYDROPONICS__STATE_TASK__STATE)
} Hydroponics__StateTask__State;
typedef enum _Hydroponics__StateTelemetry__Type {
  HYDROPONICS__STATE_TELEMETRY__TYPE__UNKNOWN = 0,
  HYDROPONICS__STATE_TELEMETRY__TYPE__TEMP_INDOOR = 1,
  HYDROPONICS__STATE_TELEMETRY__TYPE__TEMP_PROBE = 2,
  HYDROPONICS__STATE_TELEMETRY__TYPE__HUMIDITY = 3,
  HYDROPONICS__STATE_TELEMETRY__TYPE__PRESSURE = 4,
  HYDROPONICS__STATE_TELEMETRY__TYPE__EC_A = 5,
  HYDROPONICS__STATE_TELEMETRY__TYPE__EC_B = 6,
  HYDROPONICS__STATE_TELEMETRY__TYPE__PH_A = 7,
  HYDROPONICS__STATE_TELEMETRY__TYPE__PH_B = 8,
  HYDROPONICS__STATE_TELEMETRY__TYPE__TANK_A = 9,
  HYDROPONICS__STATE_TELEMETRY__TYPE__TANK_B = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HYDROPONICS__STATE_TELEMETRY__TYPE)
} Hydroponics__StateTelemetry__Type;

/* --- messages --- */

struct  _Hydroponics__StateTask
{
  ProtobufCMessage base;
  char *name;
  Hydroponics__StateTask__State state;
  uint32_t priority;
  uint64_t runtime;
  uint32_t stats;
  uint32_t highwater;
};
#define HYDROPONICS__STATE_TASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hydroponics__state_task__descriptor) \
    , (char *)protobuf_c_empty_string, HYDROPONICS__STATE_TASK__STATE__RUNNING, 0, 0, 0, 0 }


struct  _Hydroponics__StateMemory
{
  ProtobufCMessage base;
  uint32_t min_free;
  uint32_t free;
};
#define HYDROPONICS__STATE_MEMORY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hydroponics__state_memory__descriptor) \
    , 0, 0 }


struct  _Hydroponics__StateTelemetry__Value
{
  ProtobufCMessage base;
  Hydroponics__StateTelemetry__Type type;
  float value;
};
#define HYDROPONICS__STATE_TELEMETRY__VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hydroponics__state_telemetry__value__descriptor) \
    , HYDROPONICS__STATE_TELEMETRY__TYPE__UNKNOWN, 0 }


struct  _Hydroponics__StateTelemetry
{
  ProtobufCMessage base;
  size_t n_value;
  Hydroponics__StateTelemetry__Value **value;
};
#define HYDROPONICS__STATE_TELEMETRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hydroponics__state_telemetry__descriptor) \
    , 0,NULL }


struct  _Hydroponics__StateOutput
{
  ProtobufCMessage base;
  size_t n_output;
  Hydroponics__Output *output;
  Hydroponics__OutputState state;
};
#define HYDROPONICS__STATE_OUTPUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hydroponics__state_output__descriptor) \
    , 0,NULL, HYDROPONICS__OUTPUT_STATE__OFF }


typedef enum {
  HYDROPONICS__STATE__STATE__NOT_SET = 0,
  HYDROPONICS__STATE__STATE_TASK = 2,
  HYDROPONICS__STATE__STATE_MEMORY = 3,
  HYDROPONICS__STATE__STATE_TELEMETRY = 4,
  HYDROPONICS__STATE__STATE_OUTPUT = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HYDROPONICS__STATE__STATE)
} Hydroponics__State__StateCase;

struct  _Hydroponics__State
{
  ProtobufCMessage base;
  uint64_t timestamp;
  Hydroponics__State__StateCase state_case;
  union {
    Hydroponics__StateTask *task;
    Hydroponics__StateMemory *memory;
    Hydroponics__StateTelemetry *telemetry;
    Hydroponics__StateOutput *output;
  };
};
#define HYDROPONICS__STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hydroponics__state__descriptor) \
    , 0, HYDROPONICS__STATE__STATE__NOT_SET, {0} }


struct  _Hydroponics__States
{
  ProtobufCMessage base;
  size_t n_state;
  Hydroponics__State **state;
};
#define HYDROPONICS__STATES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hydroponics__states__descriptor) \
    , 0,NULL }


/* Hydroponics__StateTask methods */
void   hydroponics__state_task__init
                     (Hydroponics__StateTask         *message);
size_t hydroponics__state_task__get_packed_size
                     (const Hydroponics__StateTask   *message);
size_t hydroponics__state_task__pack
                     (const Hydroponics__StateTask   *message,
                      uint8_t             *out);
size_t hydroponics__state_task__pack_to_buffer
                     (const Hydroponics__StateTask   *message,
                      ProtobufCBuffer     *buffer);
Hydroponics__StateTask *
       hydroponics__state_task__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hydroponics__state_task__free_unpacked
                     (Hydroponics__StateTask *message,
                      ProtobufCAllocator *allocator);
/* Hydroponics__StateMemory methods */
void   hydroponics__state_memory__init
                     (Hydroponics__StateMemory         *message);
size_t hydroponics__state_memory__get_packed_size
                     (const Hydroponics__StateMemory   *message);
size_t hydroponics__state_memory__pack
                     (const Hydroponics__StateMemory   *message,
                      uint8_t             *out);
size_t hydroponics__state_memory__pack_to_buffer
                     (const Hydroponics__StateMemory   *message,
                      ProtobufCBuffer     *buffer);
Hydroponics__StateMemory *
       hydroponics__state_memory__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hydroponics__state_memory__free_unpacked
                     (Hydroponics__StateMemory *message,
                      ProtobufCAllocator *allocator);
/* Hydroponics__StateTelemetry__Value methods */
void   hydroponics__state_telemetry__value__init
                     (Hydroponics__StateTelemetry__Value         *message);
/* Hydroponics__StateTelemetry methods */
void   hydroponics__state_telemetry__init
                     (Hydroponics__StateTelemetry         *message);
size_t hydroponics__state_telemetry__get_packed_size
                     (const Hydroponics__StateTelemetry   *message);
size_t hydroponics__state_telemetry__pack
                     (const Hydroponics__StateTelemetry   *message,
                      uint8_t             *out);
size_t hydroponics__state_telemetry__pack_to_buffer
                     (const Hydroponics__StateTelemetry   *message,
                      ProtobufCBuffer     *buffer);
Hydroponics__StateTelemetry *
       hydroponics__state_telemetry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hydroponics__state_telemetry__free_unpacked
                     (Hydroponics__StateTelemetry *message,
                      ProtobufCAllocator *allocator);
/* Hydroponics__StateOutput methods */
void   hydroponics__state_output__init
                     (Hydroponics__StateOutput         *message);
size_t hydroponics__state_output__get_packed_size
                     (const Hydroponics__StateOutput   *message);
size_t hydroponics__state_output__pack
                     (const Hydroponics__StateOutput   *message,
                      uint8_t             *out);
size_t hydroponics__state_output__pack_to_buffer
                     (const Hydroponics__StateOutput   *message,
                      ProtobufCBuffer     *buffer);
Hydroponics__StateOutput *
       hydroponics__state_output__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hydroponics__state_output__free_unpacked
                     (Hydroponics__StateOutput *message,
                      ProtobufCAllocator *allocator);
/* Hydroponics__State methods */
void   hydroponics__state__init
                     (Hydroponics__State         *message);
size_t hydroponics__state__get_packed_size
                     (const Hydroponics__State   *message);
size_t hydroponics__state__pack
                     (const Hydroponics__State   *message,
                      uint8_t             *out);
size_t hydroponics__state__pack_to_buffer
                     (const Hydroponics__State   *message,
                      ProtobufCBuffer     *buffer);
Hydroponics__State *
       hydroponics__state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hydroponics__state__free_unpacked
                     (Hydroponics__State *message,
                      ProtobufCAllocator *allocator);
/* Hydroponics__States methods */
void   hydroponics__states__init
                     (Hydroponics__States         *message);
size_t hydroponics__states__get_packed_size
                     (const Hydroponics__States   *message);
size_t hydroponics__states__pack
                     (const Hydroponics__States   *message,
                      uint8_t             *out);
size_t hydroponics__states__pack_to_buffer
                     (const Hydroponics__States   *message,
                      ProtobufCBuffer     *buffer);
Hydroponics__States *
       hydroponics__states__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hydroponics__states__free_unpacked
                     (Hydroponics__States *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Hydroponics__StateTask_Closure)
                 (const Hydroponics__StateTask *message,
                  void *closure_data);
typedef void (*Hydroponics__StateMemory_Closure)
                 (const Hydroponics__StateMemory *message,
                  void *closure_data);
typedef void (*Hydroponics__StateTelemetry__Value_Closure)
                 (const Hydroponics__StateTelemetry__Value *message,
                  void *closure_data);
typedef void (*Hydroponics__StateTelemetry_Closure)
                 (const Hydroponics__StateTelemetry *message,
                  void *closure_data);
typedef void (*Hydroponics__StateOutput_Closure)
                 (const Hydroponics__StateOutput *message,
                  void *closure_data);
typedef void (*Hydroponics__State_Closure)
                 (const Hydroponics__State *message,
                  void *closure_data);
typedef void (*Hydroponics__States_Closure)
                 (const Hydroponics__States *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor hydroponics__state_task__descriptor;
extern const ProtobufCEnumDescriptor    hydroponics__state_task__state__descriptor;
extern const ProtobufCMessageDescriptor hydroponics__state_memory__descriptor;
extern const ProtobufCMessageDescriptor hydroponics__state_telemetry__descriptor;
extern const ProtobufCMessageDescriptor hydroponics__state_telemetry__value__descriptor;
extern const ProtobufCEnumDescriptor    hydroponics__state_telemetry__type__descriptor;
extern const ProtobufCMessageDescriptor hydroponics__state_output__descriptor;
extern const ProtobufCMessageDescriptor hydroponics__state__descriptor;
extern const ProtobufCMessageDescriptor hydroponics__states__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_state_2eproto__INCLUDED */
