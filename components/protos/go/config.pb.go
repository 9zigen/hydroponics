// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: config.proto

package hydroponics

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Directly matches "ext_gpio_num_t" enumeration.
type Output int32

const (
	// Water.
	Output_EXT_GPIO_A_0 Output = 0 // EXT_GPIO_START
	// Mixer.
	Output_EXT_GPIO_A_1 Output = 1
	// Not used.
	Output_EXT_GPIO_A_2 Output = 2
	// Not used.
	Output_EXT_GPIO_A_3 Output = 3
	// Not used.
	Output_EXT_GPIO_A_4 Output = 4
	// PH Down.
	Output_EXT_GPIO_A_5 Output = 5
	// PH Up.
	Output_EXT_GPIO_A_6 Output = 6
	// Nutrients.
	Output_EXT_GPIO_A_7 Output = 7
	// LED.
	Output_EXT_GPIO_B_0 Output = 8
	Output_EXT_GPIO_B_1 Output = 9
	Output_EXT_GPIO_B_2 Output = 10
	Output_EXT_GPIO_B_3 Output = 11
	Output_EXT_GPIO_B_4 Output = 12
	Output_EXT_GPIO_B_5 Output = 13
	Output_EXT_GPIO_B_6 Output = 14
	Output_EXT_GPIO_B_7 Output = 15 // EXT_GPIO_END
	// NA.
	Output_EXT_TUYA_OUT_1 Output = 101 // EXT_TUYA_START
	// Strawberries.
	Output_EXT_TUYA_OUT_2 Output = 102
	// Lettuce.
	Output_EXT_TUYA_OUT_3 Output = 103 // EXT_TUYA_END
)

// Enum value maps for Output.
var (
	Output_name = map[int32]string{
		0:   "EXT_GPIO_A_0",
		1:   "EXT_GPIO_A_1",
		2:   "EXT_GPIO_A_2",
		3:   "EXT_GPIO_A_3",
		4:   "EXT_GPIO_A_4",
		5:   "EXT_GPIO_A_5",
		6:   "EXT_GPIO_A_6",
		7:   "EXT_GPIO_A_7",
		8:   "EXT_GPIO_B_0",
		9:   "EXT_GPIO_B_1",
		10:  "EXT_GPIO_B_2",
		11:  "EXT_GPIO_B_3",
		12:  "EXT_GPIO_B_4",
		13:  "EXT_GPIO_B_5",
		14:  "EXT_GPIO_B_6",
		15:  "EXT_GPIO_B_7",
		101: "EXT_TUYA_OUT_1",
		102: "EXT_TUYA_OUT_2",
		103: "EXT_TUYA_OUT_3",
	}
	Output_value = map[string]int32{
		"EXT_GPIO_A_0":   0,
		"EXT_GPIO_A_1":   1,
		"EXT_GPIO_A_2":   2,
		"EXT_GPIO_A_3":   3,
		"EXT_GPIO_A_4":   4,
		"EXT_GPIO_A_5":   5,
		"EXT_GPIO_A_6":   6,
		"EXT_GPIO_A_7":   7,
		"EXT_GPIO_B_0":   8,
		"EXT_GPIO_B_1":   9,
		"EXT_GPIO_B_2":   10,
		"EXT_GPIO_B_3":   11,
		"EXT_GPIO_B_4":   12,
		"EXT_GPIO_B_5":   13,
		"EXT_GPIO_B_6":   14,
		"EXT_GPIO_B_7":   15,
		"EXT_TUYA_OUT_1": 101,
		"EXT_TUYA_OUT_2": 102,
		"EXT_TUYA_OUT_3": 103,
	}
)

func (x Output) Enum() *Output {
	p := new(Output)
	*p = x
	return p
}

func (x Output) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Output) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[0].Descriptor()
}

func (Output) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[0]
}

func (x Output) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Output.Descriptor instead.
func (Output) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

// Defines the state of the output, ON or OFF.
type OutputState int32

const (
	OutputState_OFF OutputState = 0
	OutputState_ON  OutputState = 1
)

// Enum value maps for OutputState.
var (
	OutputState_name = map[int32]string{
		0: "OFF",
		1: "ON",
	}
	OutputState_value = map[string]int32{
		"OFF": 0,
		"ON":  1,
	}
)

func (x OutputState) Enum() *OutputState {
	p := new(OutputState)
	*p = x
	return p
}

func (x OutputState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutputState) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[1].Descriptor()
}

func (OutputState) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[1]
}

func (x OutputState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutputState.Descriptor instead.
func (OutputState) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1}
}

type Firmware_Type int32

const (
	Firmware_TEST    Firmware_Type = 0
	Firmware_RELEASE Firmware_Type = 1
)

// Enum value maps for Firmware_Type.
var (
	Firmware_Type_name = map[int32]string{
		0: "TEST",
		1: "RELEASE",
	}
	Firmware_Type_value = map[string]int32{
		"TEST":    0,
		"RELEASE": 1,
	}
)

func (x Firmware_Type) Enum() *Firmware_Type {
	p := new(Firmware_Type)
	*p = x
	return p
}

func (x Firmware_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Firmware_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[2].Descriptor()
}

func (Firmware_Type) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[2]
}

func (x Firmware_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Firmware_Type.Descriptor instead.
func (Firmware_Type) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{5, 0}
}

type Firmware_Arch int32

const (
	Firmware_ESP32    Firmware_Arch = 0
	Firmware_ESP32_S2 Firmware_Arch = 1
)

// Enum value maps for Firmware_Arch.
var (
	Firmware_Arch_name = map[int32]string{
		0: "ESP32",
		1: "ESP32_S2",
	}
	Firmware_Arch_value = map[string]int32{
		"ESP32":    0,
		"ESP32_S2": 1,
	}
)

func (x Firmware_Arch) Enum() *Firmware_Arch {
	p := new(Firmware_Arch)
	*p = x
	return p
}

func (x Firmware_Arch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Firmware_Arch) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[3].Descriptor()
}

func (Firmware_Arch) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[3]
}

func (x Firmware_Arch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Firmware_Arch.Descriptor instead.
func (Firmware_Arch) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{5, 1}
}

type Sampling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HumidityMs    int32 `protobuf:"varint,1,opt,name=humidity_ms,json=humidityMs,proto3" json:"humidity_ms,omitempty"`
	TemperatureMs int32 `protobuf:"varint,2,opt,name=temperature_ms,json=temperatureMs,proto3" json:"temperature_ms,omitempty"`
	EcProbeMs     int32 `protobuf:"varint,3,opt,name=ec_probe_ms,json=ecProbeMs,proto3" json:"ec_probe_ms,omitempty"`
	EcProbeTempMs int32 `protobuf:"varint,4,opt,name=ec_probe_temp_ms,json=ecProbeTempMs,proto3" json:"ec_probe_temp_ms,omitempty"`
	PhProbeMs     int32 `protobuf:"varint,5,opt,name=ph_probe_ms,json=phProbeMs,proto3" json:"ph_probe_ms,omitempty"`
	MqttMs        int32 `protobuf:"varint,6,opt,name=mqtt_ms,json=mqttMs,proto3" json:"mqtt_ms,omitempty"`
}

func (x *Sampling) Reset() {
	*x = Sampling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sampling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sampling) ProtoMessage() {}

func (x *Sampling) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sampling.ProtoReflect.Descriptor instead.
func (*Sampling) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

func (x *Sampling) GetHumidityMs() int32 {
	if x != nil {
		return x.HumidityMs
	}
	return 0
}

func (x *Sampling) GetTemperatureMs() int32 {
	if x != nil {
		return x.TemperatureMs
	}
	return 0
}

func (x *Sampling) GetEcProbeMs() int32 {
	if x != nil {
		return x.EcProbeMs
	}
	return 0
}

func (x *Sampling) GetEcProbeTempMs() int32 {
	if x != nil {
		return x.EcProbeTempMs
	}
	return 0
}

func (x *Sampling) GetPhProbeMs() int32 {
	if x != nil {
		return x.PhProbeMs
	}
	return 0
}

func (x *Sampling) GetMqttMs() int32 {
	if x != nil {
		return x.MqttMs
	}
	return 0
}

type Controller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eca *Controller_Entry `protobuf:"bytes,1,opt,name=eca,proto3" json:"eca,omitempty"`
	Pha *Controller_Entry `protobuf:"bytes,2,opt,name=pha,proto3" json:"pha,omitempty"`
	Ecb *Controller_Entry `protobuf:"bytes,3,opt,name=ecb,proto3" json:"ecb,omitempty"`
	Phb *Controller_Entry `protobuf:"bytes,4,opt,name=phb,proto3" json:"phb,omitempty"`
}

func (x *Controller) Reset() {
	*x = Controller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Controller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Controller) ProtoMessage() {}

func (x *Controller) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Controller.ProtoReflect.Descriptor instead.
func (*Controller) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1}
}

func (x *Controller) GetEca() *Controller_Entry {
	if x != nil {
		return x.Eca
	}
	return nil
}

func (x *Controller) GetPha() *Controller_Entry {
	if x != nil {
		return x.Pha
	}
	return nil
}

func (x *Controller) GetEcb() *Controller_Entry {
	if x != nil {
		return x.Ecb
	}
	return nil
}

func (x *Controller) GetPhb() *Controller_Entry {
	if x != nil {
		return x.Phb
	}
	return nil
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Output []Output     `protobuf:"varint,2,rep,packed,name=output,proto3,enum=hydroponics.Output" json:"output,omitempty"`
	Cron   []*Task_Cron `protobuf:"bytes,3,rep,name=cron,proto3" json:"cron,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{2}
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetOutput() []Output {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *Task) GetCron() []*Task_Cron {
	if x != nil {
		return x.Cron
	}
	return nil
}

type HardwareId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DevId  string `protobuf:"bytes,2,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
	DpsId  int32  `protobuf:"varint,3,opt,name=dps_id,json=dpsId,proto3" json:"dps_id,omitempty"`
	Output Output `protobuf:"varint,4,opt,name=output,proto3,enum=hydroponics.Output" json:"output,omitempty"`
}

func (x *HardwareId) Reset() {
	*x = HardwareId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareId) ProtoMessage() {}

func (x *HardwareId) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareId.ProtoReflect.Descriptor instead.
func (*HardwareId) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{3}
}

func (x *HardwareId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HardwareId) GetDevId() string {
	if x != nil {
		return x.DevId
	}
	return ""
}

func (x *HardwareId) GetDpsId() int32 {
	if x != nil {
		return x.DpsId
	}
	return 0
}

func (x *HardwareId) GetOutput() Output {
	if x != nil {
		return x.Output
	}
	return Output_EXT_GPIO_A_0
}

type StartupState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State  OutputState `protobuf:"varint,1,opt,name=state,proto3,enum=hydroponics.OutputState" json:"state,omitempty"`
	Output []Output    `protobuf:"varint,2,rep,packed,name=output,proto3,enum=hydroponics.Output" json:"output,omitempty"`
}

func (x *StartupState) Reset() {
	*x = StartupState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartupState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartupState) ProtoMessage() {}

func (x *StartupState) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartupState.ProtoReflect.Descriptor instead.
func (*StartupState) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{4}
}

func (x *StartupState) GetState() OutputState {
	if x != nil {
		return x.State
	}
	return OutputState_OFF
}

func (x *StartupState) GetOutput() []Output {
	if x != nil {
		return x.Output
	}
	return nil
}

type Firmware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    Firmware_Type `protobuf:"varint,1,opt,name=type,proto3,enum=hydroponics.Firmware_Type" json:"type,omitempty"`
	Arch    Firmware_Arch `protobuf:"varint,2,opt,name=arch,proto3,enum=hydroponics.Firmware_Arch" json:"arch,omitempty"`
	Version string        `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Id      string        `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Url     string        `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Firmware) Reset() {
	*x = Firmware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Firmware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Firmware) ProtoMessage() {}

func (x *Firmware) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Firmware.ProtoReflect.Descriptor instead.
func (*Firmware) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{5}
}

func (x *Firmware) GetType() Firmware_Type {
	if x != nil {
		return x.Type
	}
	return Firmware_TEST
}

func (x *Firmware) GetArch() Firmware_Arch {
	if x != nil {
		return x.Arch
	}
	return Firmware_ESP32
}

func (x *Firmware) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Firmware) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Firmware) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sampling     *Sampling       `protobuf:"bytes,1,opt,name=sampling,proto3" json:"sampling,omitempty"`
	Controller   *Controller     `protobuf:"bytes,2,opt,name=controller,proto3" json:"controller,omitempty"`
	Task         []*Task         `protobuf:"bytes,3,rep,name=task,proto3" json:"task,omitempty"`
	HardwareId   []*HardwareId   `protobuf:"bytes,4,rep,name=hardware_id,json=hardwareId,proto3" json:"hardware_id,omitempty"`
	StartupState []*StartupState `protobuf:"bytes,5,rep,name=startup_state,json=startupState,proto3" json:"startup_state,omitempty"`
	Firmware     []*Firmware     `protobuf:"bytes,6,rep,name=firmware,proto3" json:"firmware,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{6}
}

func (x *Config) GetSampling() *Sampling {
	if x != nil {
		return x.Sampling
	}
	return nil
}

func (x *Config) GetController() *Controller {
	if x != nil {
		return x.Controller
	}
	return nil
}

func (x *Config) GetTask() []*Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *Config) GetHardwareId() []*HardwareId {
	if x != nil {
		return x.HardwareId
	}
	return nil
}

func (x *Config) GetStartupState() []*StartupState {
	if x != nil {
		return x.StartupState
	}
	return nil
}

func (x *Config) GetFirmware() []*Firmware {
	if x != nil {
		return x.Firmware
	}
	return nil
}

type Controller_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target   float32               `protobuf:"fixed32,1,opt,name=target,proto3" json:"target,omitempty"`
	Min      float32               `protobuf:"fixed32,2,opt,name=min,proto3" json:"min,omitempty"`
	Max      float32               `protobuf:"fixed32,3,opt,name=max,proto3" json:"max,omitempty"`
	Pid      *Controller_Entry_Pid `protobuf:"bytes,4,opt,name=pid,proto3" json:"pid,omitempty"`
	MinGraph float32               `protobuf:"fixed32,5,opt,name=min_graph,json=minGraph,proto3" json:"min_graph,omitempty"`
	MaxGraph float32               `protobuf:"fixed32,6,opt,name=max_graph,json=maxGraph,proto3" json:"max_graph,omitempty"`
}

func (x *Controller_Entry) Reset() {
	*x = Controller_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Controller_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Controller_Entry) ProtoMessage() {}

func (x *Controller_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Controller_Entry.ProtoReflect.Descriptor instead.
func (*Controller_Entry) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Controller_Entry) GetTarget() float32 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *Controller_Entry) GetMin() float32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Controller_Entry) GetMax() float32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Controller_Entry) GetPid() *Controller_Entry_Pid {
	if x != nil {
		return x.Pid
	}
	return nil
}

func (x *Controller_Entry) GetMinGraph() float32 {
	if x != nil {
		return x.MinGraph
	}
	return 0
}

func (x *Controller_Entry) GetMaxGraph() float32 {
	if x != nil {
		return x.MaxGraph
	}
	return 0
}

type Controller_Entry_Pid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sampling int32   `protobuf:"varint,1,opt,name=sampling,proto3" json:"sampling,omitempty"`
	P        float32 `protobuf:"fixed32,2,opt,name=p,proto3" json:"p,omitempty"`
	I        float32 `protobuf:"fixed32,3,opt,name=i,proto3" json:"i,omitempty"`
	D        float32 `protobuf:"fixed32,4,opt,name=d,proto3" json:"d,omitempty"`
}

func (x *Controller_Entry_Pid) Reset() {
	*x = Controller_Entry_Pid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Controller_Entry_Pid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Controller_Entry_Pid) ProtoMessage() {}

func (x *Controller_Entry_Pid) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Controller_Entry_Pid.ProtoReflect.Descriptor instead.
func (*Controller_Entry_Pid) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *Controller_Entry_Pid) GetSampling() int32 {
	if x != nil {
		return x.Sampling
	}
	return 0
}

func (x *Controller_Entry_Pid) GetP() float32 {
	if x != nil {
		return x.P
	}
	return 0
}

func (x *Controller_Entry_Pid) GetI() float32 {
	if x != nil {
		return x.I
	}
	return 0
}

func (x *Controller_Entry_Pid) GetD() float32 {
	if x != nil {
		return x.D
	}
	return 0
}

type Task_Cron struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State      OutputState `protobuf:"varint,1,opt,name=state,proto3,enum=hydroponics.OutputState" json:"state,omitempty"`
	Expression []string    `protobuf:"bytes,2,rep,name=expression,proto3" json:"expression,omitempty"`
}

func (x *Task_Cron) Reset() {
	*x = Task_Cron{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_Cron) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Cron) ProtoMessage() {}

func (x *Task_Cron) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Cron.ProtoReflect.Descriptor instead.
func (*Task_Cron) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Task_Cron) GetState() OutputState {
	if x != nil {
		return x.State
	}
	return OutputState_OFF
}

func (x *Task_Cron) GetExpression() []string {
	if x != nil {
		return x.Expression
	}
	return nil
}

var File_config_proto protoreflect.FileDescriptor

var file_config_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x68, 0x79, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x08,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x75, 0x6d, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68,
	0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x73,
	0x12, 0x1e, 0x0a, 0x0b, 0x65, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x4d, 0x73,
	0x12, 0x27, 0x0a, 0x10, 0x65, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x63, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x68, 0x5f,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x4d, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x71, 0x74,
	0x74, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x71, 0x74, 0x74,
	0x4d, 0x73, 0x22, 0xd2, 0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x2f, 0x0a, 0x03, 0x65, 0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65,
	0x63, 0x61, 0x12, 0x2f, 0x0a, 0x03, 0x70, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03,
	0x70, 0x68, 0x61, 0x12, 0x2f, 0x0a, 0x03, 0x65, 0x63, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x03, 0x65, 0x63, 0x62, 0x12, 0x2f, 0x0a, 0x03, 0x70, 0x68, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x03, 0x70, 0x68, 0x62, 0x1a, 0xff, 0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x33, 0x0a, 0x03, 0x70,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f,
	0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x69, 0x64, 0x52, 0x03, 0x70, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x70, 0x68, 0x1a, 0x4b, 0x0a, 0x03, 0x50, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x0c, 0x0a,
	0x01, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x70, 0x12, 0x0c, 0x0a, 0x01, 0x69,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x69, 0x12, 0x0c, 0x0a, 0x01, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69,
	0x63, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x2a, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x1a, 0x56, 0x0a,
	0x04, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69,
	0x63, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7b, 0x0a, 0x0a, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x76, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x64, 0x70, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x64, 0x70, 0x73, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x6e,
	0x69, 0x63, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x6b, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73,
	0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0xe6, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x79, 0x64,
	0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x68, 0x79, 0x64,
	0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x1d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45,
	0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x01, 0x22, 0x1f, 0x0a, 0x04, 0x41, 0x72, 0x63, 0x68, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x53, 0x50, 0x33, 0x32, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x53,
	0x50, 0x33, 0x32, 0x5f, 0x53, 0x32, 0x10, 0x01, 0x22, 0xc8, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x6e,
	0x69, 0x63, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x79, 0x64,
	0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x68, 0x79, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x38, 0x0a, 0x0b, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x79,
	0x64, 0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x64, 0x52, 0x0a, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x70,
	0x6f, 0x6e, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x31, 0x0a, 0x08, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73,
	0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x08, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x2a, 0xe4, 0x02, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x10,
	0x0a, 0x0c, 0x45, 0x58, 0x54, 0x5f, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x41, 0x5f, 0x30, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x45, 0x58, 0x54, 0x5f, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x41, 0x5f, 0x31,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x58, 0x54, 0x5f, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x41,
	0x5f, 0x32, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x58, 0x54, 0x5f, 0x47, 0x50, 0x49, 0x4f,
	0x5f, 0x41, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x58, 0x54, 0x5f, 0x47, 0x50,
	0x49, 0x4f, 0x5f, 0x41, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x58, 0x54, 0x5f,
	0x47, 0x50, 0x49, 0x4f, 0x5f, 0x41, 0x5f, 0x35, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x58,
	0x54, 0x5f, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x41, 0x5f, 0x36, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c,
	0x45, 0x58, 0x54, 0x5f, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x41, 0x5f, 0x37, 0x10, 0x07, 0x12, 0x10,
	0x0a, 0x0c, 0x45, 0x58, 0x54, 0x5f, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x42, 0x5f, 0x30, 0x10, 0x08,
	0x12, 0x10, 0x0a, 0x0c, 0x45, 0x58, 0x54, 0x5f, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x42, 0x5f, 0x31,
	0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x58, 0x54, 0x5f, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x42,
	0x5f, 0x32, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x58, 0x54, 0x5f, 0x47, 0x50, 0x49, 0x4f,
	0x5f, 0x42, 0x5f, 0x33, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x58, 0x54, 0x5f, 0x47, 0x50,
	0x49, 0x4f, 0x5f, 0x42, 0x5f, 0x34, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x58, 0x54, 0x5f,
	0x47, 0x50, 0x49, 0x4f, 0x5f, 0x42, 0x5f, 0x35, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x58,
	0x54, 0x5f, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x42, 0x5f, 0x36, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c,
	0x45, 0x58, 0x54, 0x5f, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x42, 0x5f, 0x37, 0x10, 0x0f, 0x12, 0x12,
	0x0a, 0x0e, 0x45, 0x58, 0x54, 0x5f, 0x54, 0x55, 0x59, 0x41, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x31,
	0x10, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x58, 0x54, 0x5f, 0x54, 0x55, 0x59, 0x41, 0x5f, 0x4f,
	0x55, 0x54, 0x5f, 0x32, 0x10, 0x66, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x58, 0x54, 0x5f, 0x54, 0x55,
	0x59, 0x41, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x33, 0x10, 0x67, 0x2a, 0x1e, 0x0a, 0x0b, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4e, 0x10, 0x01, 0x42, 0x43, 0x0a, 0x1d, 0x70, 0x74,
	0x2e, 0x73, 0x6f, 0x62, 0x72, 0x69, 0x6e, 0x68, 0x6f, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x70,
	0x6f, 0x6e, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x20, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x73, 0x6f, 0x62, 0x72, 0x69,
	0x6e, 0x68, 0x6f, 0x2f, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_proto_rawDescOnce sync.Once
	file_config_proto_rawDescData = file_config_proto_rawDesc
)

func file_config_proto_rawDescGZIP() []byte {
	file_config_proto_rawDescOnce.Do(func() {
		file_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_proto_rawDescData)
	})
	return file_config_proto_rawDescData
}

var file_config_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_config_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_config_proto_goTypes = []interface{}{
	(Output)(0),                  // 0: hydroponics.Output
	(OutputState)(0),             // 1: hydroponics.OutputState
	(Firmware_Type)(0),           // 2: hydroponics.Firmware.Type
	(Firmware_Arch)(0),           // 3: hydroponics.Firmware.Arch
	(*Sampling)(nil),             // 4: hydroponics.Sampling
	(*Controller)(nil),           // 5: hydroponics.Controller
	(*Task)(nil),                 // 6: hydroponics.Task
	(*HardwareId)(nil),           // 7: hydroponics.HardwareId
	(*StartupState)(nil),         // 8: hydroponics.StartupState
	(*Firmware)(nil),             // 9: hydroponics.Firmware
	(*Config)(nil),               // 10: hydroponics.Config
	(*Controller_Entry)(nil),     // 11: hydroponics.Controller.Entry
	(*Controller_Entry_Pid)(nil), // 12: hydroponics.Controller.Entry.Pid
	(*Task_Cron)(nil),            // 13: hydroponics.Task.Cron
}
var file_config_proto_depIdxs = []int32{
	11, // 0: hydroponics.Controller.eca:type_name -> hydroponics.Controller.Entry
	11, // 1: hydroponics.Controller.pha:type_name -> hydroponics.Controller.Entry
	11, // 2: hydroponics.Controller.ecb:type_name -> hydroponics.Controller.Entry
	11, // 3: hydroponics.Controller.phb:type_name -> hydroponics.Controller.Entry
	0,  // 4: hydroponics.Task.output:type_name -> hydroponics.Output
	13, // 5: hydroponics.Task.cron:type_name -> hydroponics.Task.Cron
	0,  // 6: hydroponics.HardwareId.output:type_name -> hydroponics.Output
	1,  // 7: hydroponics.StartupState.state:type_name -> hydroponics.OutputState
	0,  // 8: hydroponics.StartupState.output:type_name -> hydroponics.Output
	2,  // 9: hydroponics.Firmware.type:type_name -> hydroponics.Firmware.Type
	3,  // 10: hydroponics.Firmware.arch:type_name -> hydroponics.Firmware.Arch
	4,  // 11: hydroponics.Config.sampling:type_name -> hydroponics.Sampling
	5,  // 12: hydroponics.Config.controller:type_name -> hydroponics.Controller
	6,  // 13: hydroponics.Config.task:type_name -> hydroponics.Task
	7,  // 14: hydroponics.Config.hardware_id:type_name -> hydroponics.HardwareId
	8,  // 15: hydroponics.Config.startup_state:type_name -> hydroponics.StartupState
	9,  // 16: hydroponics.Config.firmware:type_name -> hydroponics.Firmware
	12, // 17: hydroponics.Controller.Entry.pid:type_name -> hydroponics.Controller.Entry.Pid
	1,  // 18: hydroponics.Task.Cron.state:type_name -> hydroponics.OutputState
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_config_proto_init() }
func file_config_proto_init() {
	if File_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sampling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Controller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwareId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartupState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Firmware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Controller_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Controller_Entry_Pid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_Cron); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_proto_goTypes,
		DependencyIndexes: file_config_proto_depIdxs,
		EnumInfos:         file_config_proto_enumTypes,
		MessageInfos:      file_config_proto_msgTypes,
	}.Build()
	File_config_proto = out.File
	file_config_proto_rawDesc = nil
	file_config_proto_goTypes = nil
	file_config_proto_depIdxs = nil
}
