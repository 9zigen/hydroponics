// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.1
// source: commands.proto

package hydroponics

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CommandReboot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommandReboot) Reset() {
	*x = CommandReboot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commands_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandReboot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandReboot) ProtoMessage() {}

func (x *CommandReboot) ProtoReflect() protoreflect.Message {
	mi := &file_commands_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandReboot.ProtoReflect.Descriptor instead.
func (*CommandReboot) Descriptor() ([]byte, []int) {
	return file_commands_proto_rawDescGZIP(), []int{0}
}

type CommandSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output []Output    `protobuf:"varint,1,rep,packed,name=output,proto3,enum=hydroponics.Output" json:"output,omitempty"`
	State  OutputState `protobuf:"varint,2,opt,name=state,proto3,enum=hydroponics.OutputState" json:"state,omitempty"`
}

func (x *CommandSet) Reset() {
	*x = CommandSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commands_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSet) ProtoMessage() {}

func (x *CommandSet) ProtoReflect() protoreflect.Message {
	mi := &file_commands_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSet.ProtoReflect.Descriptor instead.
func (*CommandSet) Descriptor() ([]byte, []int) {
	return file_commands_proto_rawDescGZIP(), []int{1}
}

func (x *CommandSet) GetOutput() []Output {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *CommandSet) GetState() OutputState {
	if x != nil {
		return x.State
	}
	return OutputState_OFF
}

// Defines an output impulse response.
// The output will start on the initial `state`, then it will be valid for `delay_ms` and finally it will transition to
// the final `!state`.
type CommandImpulse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output  []Output    `protobuf:"varint,1,rep,packed,name=output,proto3,enum=hydroponics.Output" json:"output,omitempty"`
	State   OutputState `protobuf:"varint,2,opt,name=state,proto3,enum=hydroponics.OutputState" json:"state,omitempty"`
	DelayMs uint32      `protobuf:"varint,3,opt,name=delay_ms,json=delayMs,proto3" json:"delay_ms,omitempty"`
}

func (x *CommandImpulse) Reset() {
	*x = CommandImpulse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commands_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandImpulse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandImpulse) ProtoMessage() {}

func (x *CommandImpulse) ProtoReflect() protoreflect.Message {
	mi := &file_commands_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandImpulse.ProtoReflect.Descriptor instead.
func (*CommandImpulse) Descriptor() ([]byte, []int) {
	return file_commands_proto_rawDescGZIP(), []int{2}
}

func (x *CommandImpulse) GetOutput() []Output {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *CommandImpulse) GetState() OutputState {
	if x != nil {
		return x.State
	}
	return OutputState_OFF
}

func (x *CommandImpulse) GetDelayMs() uint32 {
	if x != nil {
		return x.DelayMs
	}
	return 0
}

type CommandI2C struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    uint32 `protobuf:"varint,1,opt,name=address,proto3" json:"address,omitempty"`
	RegAddress uint32 `protobuf:"varint,2,opt,name=reg_address,json=regAddress,proto3" json:"reg_address,omitempty"`
	Write      []byte `protobuf:"bytes,3,opt,name=write,proto3" json:"write,omitempty"`
	ReadLen    uint32 `protobuf:"varint,4,opt,name=read_len,json=readLen,proto3" json:"read_len,omitempty"`
}

func (x *CommandI2C) Reset() {
	*x = CommandI2C{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commands_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandI2C) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandI2C) ProtoMessage() {}

func (x *CommandI2C) ProtoReflect() protoreflect.Message {
	mi := &file_commands_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandI2C.ProtoReflect.Descriptor instead.
func (*CommandI2C) Descriptor() ([]byte, []int) {
	return file_commands_proto_rawDescGZIP(), []int{3}
}

func (x *CommandI2C) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *CommandI2C) GetRegAddress() uint32 {
	if x != nil {
		return x.RegAddress
	}
	return 0
}

func (x *CommandI2C) GetWrite() []byte {
	if x != nil {
		return x.Write
	}
	return nil
}

func (x *CommandI2C) GetReadLen() uint32 {
	if x != nil {
		return x.ReadLen
	}
	return 0
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//	*Command_Reboot
	//	*Command_Set
	//	*Command_Impulse
	//	*Command_I2C
	Command isCommand_Command `protobuf_oneof:"command"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commands_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_commands_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_commands_proto_rawDescGZIP(), []int{4}
}

func (m *Command) GetCommand() isCommand_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *Command) GetReboot() *CommandReboot {
	if x, ok := x.GetCommand().(*Command_Reboot); ok {
		return x.Reboot
	}
	return nil
}

func (x *Command) GetSet() *CommandSet {
	if x, ok := x.GetCommand().(*Command_Set); ok {
		return x.Set
	}
	return nil
}

func (x *Command) GetImpulse() *CommandImpulse {
	if x, ok := x.GetCommand().(*Command_Impulse); ok {
		return x.Impulse
	}
	return nil
}

func (x *Command) GetI2C() *CommandI2C {
	if x, ok := x.GetCommand().(*Command_I2C); ok {
		return x.I2C
	}
	return nil
}

type isCommand_Command interface {
	isCommand_Command()
}

type Command_Reboot struct {
	Reboot *CommandReboot `protobuf:"bytes,1,opt,name=reboot,proto3,oneof"`
}

type Command_Set struct {
	Set *CommandSet `protobuf:"bytes,2,opt,name=set,proto3,oneof"`
}

type Command_Impulse struct {
	Impulse *CommandImpulse `protobuf:"bytes,3,opt,name=impulse,proto3,oneof"`
}

type Command_I2C struct {
	I2C *CommandI2C `protobuf:"bytes,4,opt,name=i2c,proto3,oneof"`
}

func (*Command_Reboot) isCommand_Command() {}

func (*Command_Set) isCommand_Command() {}

func (*Command_Impulse) isCommand_Command() {}

func (*Command_I2C) isCommand_Command() {}

type Commands struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command []*Command `protobuf:"bytes,1,rep,name=command,proto3" json:"command,omitempty"`
}

func (x *Commands) Reset() {
	*x = Commands{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commands_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commands) ProtoMessage() {}

func (x *Commands) ProtoReflect() protoreflect.Message {
	mi := &file_commands_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commands.ProtoReflect.Descriptor instead.
func (*Commands) Descriptor() ([]byte, []int) {
	return file_commands_proto_rawDescGZIP(), []int{5}
}

func (x *Commands) GetCommand() []*Command {
	if x != nil {
		return x.Command
	}
	return nil
}

var File_commands_proto protoreflect.FileDescriptor

var file_commands_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x1a, 0x0c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0f, 0x0a, 0x0d, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x22, 0x69, 0x0a, 0x0a,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x68, 0x79, 0x64,
	0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x70, 0x6f,
	0x6e, 0x69, 0x63, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x68, 0x79, 0x64,
	0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x70, 0x6f,
	0x6e, 0x69, 0x63, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x4d, 0x73, 0x22, 0x78, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x32, 0x63,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x72, 0x65, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x22, 0xdd, 0x01, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x62, 0x6f,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f,
	0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x62, 0x6f, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x2b,
	0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x79,
	0x64, 0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x69,
	0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68,
	0x79, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6d, 0x70,
	0x75, 0x6c, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x69, 0x32, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x32, 0x63, 0x48, 0x00, 0x52, 0x03, 0x69, 0x32,
	0x63, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x3a, 0x0a, 0x08,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x79, 0x64, 0x72,
	0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x43, 0x0a, 0x1d, 0x70, 0x74, 0x2e, 0x73,
	0x6f, 0x62, 0x72, 0x69, 0x6e, 0x68, 0x6f, 0x2e, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x6e,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x20, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x73, 0x6f, 0x62, 0x72, 0x69, 0x6e, 0x68,
	0x6f, 0x2f, 0x68, 0x79, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_commands_proto_rawDescOnce sync.Once
	file_commands_proto_rawDescData = file_commands_proto_rawDesc
)

func file_commands_proto_rawDescGZIP() []byte {
	file_commands_proto_rawDescOnce.Do(func() {
		file_commands_proto_rawDescData = protoimpl.X.CompressGZIP(file_commands_proto_rawDescData)
	})
	return file_commands_proto_rawDescData
}

var file_commands_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_commands_proto_goTypes = []interface{}{
	(*CommandReboot)(nil),  // 0: hydroponics.CommandReboot
	(*CommandSet)(nil),     // 1: hydroponics.CommandSet
	(*CommandImpulse)(nil), // 2: hydroponics.CommandImpulse
	(*CommandI2C)(nil),     // 3: hydroponics.CommandI2c
	(*Command)(nil),        // 4: hydroponics.Command
	(*Commands)(nil),       // 5: hydroponics.Commands
	(Output)(0),            // 6: hydroponics.Output
	(OutputState)(0),       // 7: hydroponics.OutputState
}
var file_commands_proto_depIdxs = []int32{
	6, // 0: hydroponics.CommandSet.output:type_name -> hydroponics.Output
	7, // 1: hydroponics.CommandSet.state:type_name -> hydroponics.OutputState
	6, // 2: hydroponics.CommandImpulse.output:type_name -> hydroponics.Output
	7, // 3: hydroponics.CommandImpulse.state:type_name -> hydroponics.OutputState
	0, // 4: hydroponics.Command.reboot:type_name -> hydroponics.CommandReboot
	1, // 5: hydroponics.Command.set:type_name -> hydroponics.CommandSet
	2, // 6: hydroponics.Command.impulse:type_name -> hydroponics.CommandImpulse
	3, // 7: hydroponics.Command.i2c:type_name -> hydroponics.CommandI2c
	4, // 8: hydroponics.Commands.command:type_name -> hydroponics.Command
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_commands_proto_init() }
func file_commands_proto_init() {
	if File_commands_proto != nil {
		return
	}
	file_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_commands_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandReboot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commands_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commands_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandImpulse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commands_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandI2C); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commands_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commands_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commands); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_commands_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Command_Reboot)(nil),
		(*Command_Set)(nil),
		(*Command_Impulse)(nil),
		(*Command_I2C)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commands_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_commands_proto_goTypes,
		DependencyIndexes: file_commands_proto_depIdxs,
		MessageInfos:      file_commands_proto_msgTypes,
	}.Build()
	File_commands_proto = out.File
	file_commands_proto_rawDesc = nil
	file_commands_proto_goTypes = nil
	file_commands_proto_depIdxs = nil
}
